// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client_js {
    provider        = "prisma-client-js"
    previewFeatures = ["postgresqlExtensions"]
    output          = "./../../nextapp/node_modules/.prisma/client"
}

generator client_py {
    provider             = "prisma-client-py"
    previewFeatures      = ["postgresqlExtensions"]
    interface            = "asyncio"
    recursive_type_depth = -1
}

datasource db {
    provider   = "postgresql"
    url        = env("DATABASE_URL")
    directUrl  = env("DATABASE_URL")
    extensions = [vector]
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("authjs_user")
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
    @@map("authjs_account")
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("authjs_session")
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
    @@map("authjs_verification")
}
